// ------------------------------------------------------------------
//
// INDEX
//
//  #VARS
//
//  #STYLES
//
// ------------------------------------------------------------------


// ------------------------------------------------------------------
// #VARS
// ------------------------------------------------------------------

// spacings
$forms__margin__elements: 8px;





// ------------------------------------------------------------------
// #STYLES
// ------------------------------------------------------------------

//
// Textual form controls
//

// form-control
.form-control {
  width: 100%;
  height: $input__height;
  line-height: $input-line-height;
  // line-height: 1.5;
  display: block;
  padding: $input-padding-y $input-padding-x;
  // font-size: $font-size-base;
  font-size: $input__font-size;
  font-weight: $font-weight--normal;
  color: $input-color;
  background-color: $input-bg;
  background-clip: padding-box;

  border-width: $border-width__default;
  border-color: $input__border-color;
  border-style: solid;
  @include anim;

  // Note: This has no effect on <select>s in some browsers, due to the limited stylability of `<select>`s in CSS.
  @if $enable-rounded {
    // Manually use the if/else instead of the mixin to account for iOS override
    border-radius: $input-border-radius;
  } @else {
    // Otherwise undo the iOS default
    border-radius: 0;
  }

  @include box-shadow($input-box-shadow);
  @include transition($input-transition);

  // Unstyle the caret on `<select>`s in IE10+.
  &::-ms-expand {
    background-color: transparent;
    border: 0;
  }

  // Customize the `:focus` state to imitate native WebKit styles.
  @include form-control-focus();

  // Placeholder
  &::placeholder {
    color: $input-placeholder-color;
    // Override Firefox's unusual default opacity; see https://github.com/twbs/bootstrap/pull/11526.
    opacity: 1;
  }

  // Disabled and read-only inputs
  //
  // HTML5 says that controls under a fieldset > legend:first-child won't be
  // disabled if the fieldset is disabled. Due to implementation difficulty, we
  // don't honor that edge case; we style them as disabled anyway.
  &:disabled,
  &[readonly] {
    // iOS fix for unreadable disabled content; see https://github.com/twbs/bootstrap/issues/11655.
    opacity: 1;
  }

  & ~ .input-group-prepend,
  & ~ .input-group-append {
    height: $input__height;
    z-index: 4;
    .input-group-text {
      @include anim;
      font-size: 14px;
      i {
        font-size: inherit;
        margin-right: 5px;
        &:last-child {
          margin-right: 0;
        }
      }
    }
  }

  &:disabled {
    background-color: $input__disabled__bg !important;
    cursor: not-allowed;

    &,
    & ~ .input-group-prepend .input-group-text,
    & ~ .input-group-append .input-group-text {
      // background: $input__disabled__bg;
      cursor: not-allowed;
      color: $input__disabled__color;
      i {
        color: inherit;
      }
    }
  }

  // focus
  &:focus {
    & ~ .input-group-prepend {
      .input-group-text {
        border-color: $input__focus-border-color;
        color: $input__focus-border-color;
        i {
          color: inherit;
        }
      }
    }
    & ~ .input-group-append {
      .input-group-text {
        border-color: $input__focus-border-color;
        color: $input__focus-border-color;
        i {
          color: inherit;
        }
      }
    }
  }

  // type: select and search
  &.form-control-search,
  &.form-control-select {
    padding-left: 0 !important;
    padding-right: 0 !important;

    // defaults
    .dropdown,
    .ngx-select__selected {
      height: 100%;
    }

    // disabled
    .ngx-select__disabled {
      border-radius: $border-radius__default;
      background-color: $input__disabled__bg;
      opacity: 0;
      & ~ .ngx-select__selected {
        .ngx-select__toggle {
          border-color: $input__disabled__border-color;
          background-color: $input__disabled__bg;
          cursor: not-allowed;
          span {
            color: $input__disabled__color;
          }
        }
      }
    }

    // clear icon
    .ngx-select__toggle-buttons {
      .btn-link {
        margin-right: 0 !important;
        .ngx-select__clear-icon {
          width: 12px;
          height: 12px;
          color: $input__color;
          @include icon(close) {
            width: 12px;
            height: 12px;
            line-height: 12px;
            transform: rotate(0deg);
            border: none;
            color: inherit;
          }
          &:after {
            display: none;
          }
        }
      }
    }

    // form inside
    .form-control {
      width: calc(100% + #{$border-width__default}*2);
      height: calc(100% + #{$border-width__default}*2);
      position: relative;
      font-size: inherit;
      top: -1px;
      left: -1px;

      // states
      &:active,
      &:focus,
      &:hover {
        background-color: white;
        border-color: $input__focus-border-color;
      }

      // dropdown normalize
      .dropdown-toggle {
        display: none;
        // width: 12px;
        // height: 12px;
        // line-height: 12px;
        // &:after {
        //   border: none;
        // }
      }

      // placeholder
      .ngx-select__placeholder {
        @include align(middle);
        span {
          color: $input-placeholder-color;
          text-transform: initial;
          font-size: inherit;
          font-weight: inherit;
          line-height: $input-line-height;
        }
      }

      // option selected single
      .ngx-select__selected-single {
        span {
          text-transform: initial;
        }
      }
    }

    // dropdown menu
    .dropdown-menu {
      width: calc(100% + #{$border-width__default}*2);
      top: calc(100% + 4px);
      margin-left: -1px;
      font-size: $font-size--normal;
      border-color: $input__focus-border-color;
      box-shadow: $shadow--topdown--2;
      .ngx-select__item-group {
        .ngx-select__item {
          &.ngx-select__item_active {
            background: $input__focus-border-color;
          }
        }
      }
    }
  }

  // type: select
  &.form-control-select {
    // arrow down
    .dropdown {
      @include icon(chevron-down, after) {
        width: 12px;
        height: 12px;
        line-height: 12px;
        right: $input-padding-x;
        @include center(v);
        border: none;
        font-size: 12px;
        color: $color__dark-blue-gray--3;
        pointer-events: none;
        @include anim;
      }
      &.open {
        &:after {
          color: $input__focus-border-color;
        }
      }
    }

    // form small
    &.form-control-sm {
      .dropdown {
        &:after {
          right: $input-padding-x-sm;
        }
      }
    }

    // form large
    &.form-control-lg {
      .dropdown {
        &:after {
          right: $input-padding-x-lg;
        }
      }
    }
  }

  // type: search
  &.form-control-search {
    // search icon
    .ngx-select__toggle {
      .ngx-select__selected-single,
      .ngx-select__placeholder {
        span {
          @include icon(search) {
            margin-right: $input__padding-x;
            font-size: 12px;
            color: inherit;
          }
        }
      }
    }

    // include search icon
    .ngx-select {
      &.open {
        @include icon(search) {
          @include center(v);
          left: $input__padding-x;
          margin-right: $input__padding-x;
          font-size: 12px;
          color: inherit;
          pointer-events: none;
          z-index: 1;
        }
        input {
          padding-left: $input__padding-x + 27px;
        }
      }

      &.open {
        &:before {
          color: $input__focus-border-color;
        }
      }
    }

    &.form-control-sm {
      .ngx-select__toggle {
        .ngx-select__selected-single,
        .ngx-select__placeholder {
          span {
            &:before {
              margin-right: $input-padding-x-sm;
            }
          }
        }
      }
      .ngx-select {
        &:after {
          margin-right: $input-padding-x-sm;
        }
      }
    }
    &.form-control-lg {
      .ngx-select__toggle {
        .ngx-select__selected-single,
        .ngx-select__placeholder {
          span {
            &:before {
              margin-right: $input-padding-x-lg;
            }
          }
        }
      }
      .ngx-select {
        &:after {
          margin-right: $input-padding-x-lg;
        }
      }
    }
  }

  &.form-control-daterangepicker {
    &[readonly] {
      background: transparent;
    }
  }
}

textarea.form-control {
  height: auto;
  padding: .375rem .75rem;
}

.feedback-group {
  display: flex;
  flex-flow: row nowrap;
  justify-content: space-between;

  .feedback {
    width: calc(100% - 20px);
    display: inline-block !important;
    margin-top: $forms__margin__elements;
    font-size: $font-size--nano;
    &:not([class*="-feedback"]) {
      color: $color__dark-blue-gray--3;
    }
  }

  .button-info {
    width: 14px !important;
    height: 14px !important;
    line-height: 14px !important;
    appearance: none;
    cursor: pointer;
    border: none;
    padding: 0 !important;
    font-size: $font-size--nano;
    margin-top: $forms__margin__elements;
    @include outline;
    @include icon(info) {
      width: 14px !important;
      height: 14px !important;
      line-height: 14px !important;
      font-size: 14px;
      color: $color__dark-blue-gray--3;
    }

    & ~ .popover {
      .popover-arrow {
        left: auto !important;
        right: 12px;
      }
    }
  }
}

// select
select.form-control {
  &:not([size]):not([multiple]) {
    height: $input-height;
  }

  appearance: none;
  @include icon(search) {
    margin-right: $input__padding-x;
    font-size: 12px;
    color: inherit;
  }

  &:focus::-ms-value {
    // Suppress the nested default white text on blue background highlight given to
    // the selected option text when the (still closed) <select> receives focus
    // in IE and (under certain conditions) Edge, as it looks bad and cannot be made to
    // match the appearance of the native widget.
    // See https://github.com/twbs/bootstrap/issues/19398.
    color: $input-color;
    background-color: $input-bg;
  }
}

// Make file inputs better match text inputs by forcing them to new lines.
.form-control-file,
.form-control-range {
  display: block;
  width: 100%;
}


//
// Labels
//

// label group
.label-group {
  display: flex;
  justify-content: space-between;
}

// label
label {
  // width: calc(100% - 20px);
  display: inline-block !important;
  font-size: $font-size--nano;
  font-weight: $font-weight--bold;
  margin-bottom: $forms__margin__elements;
  text-transform: uppercase;
  color: $color__dark-blue-gray--3;

  & + .label-count {
    display: inline-block !important;
    font-size: $font-size--nano;
    text-align: right;
    color: $color__dark-blue-gray--3;
  }
}

// For use with horizontal and inline forms, when you need the label (or legend)
// text to align with the form controls.
.col-form-label {
  padding-top: calc(#{$input-padding-y} + #{$input-border-width});
  padding-bottom: calc(#{$input-padding-y} + #{$input-border-width});
  margin-bottom: 0; // Override the `<label>/<legend>` default
  font-size: inherit; // Override the `<legend>` default
  line-height: $input-line-height;
}

.col-form-label-lg {
  padding-top: calc(#{$input-padding-y-lg} + #{$input-border-width});
  padding-bottom: calc(#{$input-padding-y-lg} + #{$input-border-width});
  font-size: $font-size-lg;
  line-height: $input-line-height-lg;
}

.col-form-label-sm {
  padding-top: calc(#{$input-padding-y-sm} + #{$input-border-width});
  padding-bottom: calc(#{$input-padding-y-sm} + #{$input-border-width});
  font-size: $font-size-sm;
  line-height: $input-line-height-sm;
}


// Readonly controls as plain text
//
// Apply class to a readonly input to make it appear like regular plain
// text (without any border, background color, focus indicator)

.form-control-plaintext {
  display: block;
  width: 100%;
  padding-top: $input-padding-y;
  padding-bottom: $input-padding-y;
  margin-bottom: 0; // match inputs if this class comes on inputs with default margins
  line-height: $input-line-height;
  background-color: transparent;
  border: solid transparent;
  border-width: $input-border-width 0;

  &.form-control-sm,
  &.form-control-lg {
    padding-right: 0;
    padding-left: 0;
  }
}


// Form control sizing
//
// Build on `.form-control` with modifier classes to decrease or increase the
// height and font-size of form controls.
//
// The `.form-group-* form-control` variations are sadly duplicated to avoid the
// issue documented in https://github.com/twbs/bootstrap/issues/15074.

.form-control-sm {
  height: $input__height-sm;
  padding: $input-padding-y-sm $input-padding-x-sm;
  font-size: $input__font-size-sm;
  line-height: $input-line-height-sm;
  @include border-radius($input-border-radius-sm);

  .form-control {
    padding: $input-padding-y-sm $input-padding-x-sm;
  }

  & ~ .input-group-prepend,
  & ~ .input-group-append {
    height: $input__height-sm;
    font-size: $font-size--small;
    .input-group-text {
      padding: $input__padding-y-sm $input__padding-x-sm;
    }
  }
}

select.form-control-sm {
  &:not([size]):not([multiple]) {
    height: $input-height-sm;
  }
}

.form-control-lg {
  height: $input__height-lg;
  padding: $input-padding-y-lg $input-padding-x-lg;
  font-size: $input__font-size-lg;
  line-height: $input-line-height-lg;
  @include border-radius($input-border-radius-lg);

  .form-control {
    padding: $input-padding-y-lg $input-padding-x-lg;
  }

  & ~ .input-group-prepend,
  & ~ .input-group-append {
    height: $input__height-lg;
    font-size: $font-size--head-3;
    .input-group-text {
      padding: $input__padding-y-lg $input__padding-x-lg;
    }
  }
}

select.form-control-lg {
  &:not([size]):not([multiple]) {
    height: $input-height-lg;
  }
}


// Form groups
//
// Designed to help with the organization and spacing of vertical forms. For
// horizontal forms, use the predefined grid classes.

.form-group {
  margin-bottom: $form-group-margin-bottom;

  &.form-group-tn {
    width: 120px;
  }

  &.form-group-sm {
    width: 150px;
  }

  &.form-group-lg {
    width: 200px;
  }

  &.form-group-xl {
    width: 250px;
  }

  &.mandatory {
    label {
      &:after {
        content: '●';
        color: inherit;
        margin-left: 3px;
      }
    }
  }

  &.selected {
    .label-group {
      label {
        color: $input__focus-border-color;
      }
    }
    input {
      border-color: $input__focus-border-color;
    }
    .input-group-prepend,
    .input-group-append {
      .input-group-text {
        border-color: $input__focus-border-color;
        color: $input__focus-border-color;
        i {
          color: inherit;
        }
      }
    }
  }

  &.invalid {
    .label-group {
      label {
        color: $color__state--danger;
      }
    }
    .input-group {
      input {
        border-color: $color__state--danger;
      }
    }
    .input-group-prepend,
    .input-group-append {
      .input-group-text {
        border-color: $color__state--danger;
        color: $color__state--danger;
        i {
          color: inherit;
        }
      }
    }
    .feedback-group {
      .feedback {
        color: $color__state--danger;
      }
    }
  }
}

.form-text {
  display: block;
  margin-top: $form-text-margin-top;
}


// Form grid
//
// Special replacement for our grid system's `.row` for tighter form layouts.

.form-row {
  display: flex;
  flex-wrap: wrap;
  margin-right: -5px;
  margin-left: -5px;

  > .col,
  > [class*="col-"] {
    padding-right: 5px;
    padding-left: 5px;
  }
}


// Checkboxes and radios
//
// Indent the labels to position radios/checkboxes as hanging controls.

.form-check {
  position: relative;
  display: block;
  padding-left: $input__checkbox__gutter;
}

.form-check-input,
.form-check-toggle {
  width: $input__checkbox__size;
  height: $input__checkbox__size;
  appearance: none;
  border: $input__border-width solid $input__border-color;
  position: absolute;
  cursor: pointer;
  margin-top: $form-check-input-margin-y;
  margin-left: -$input__checkbox__gutter;
  @include anim(all);
  &[type="radio"] {
    border-radius: 50%;
    &:after {
      border-radius: 50%;
    }
  }

  // checkbox label
  & ~ .form-check-label {
    font-weight: $font-weight--light;
    cursor: pointer;
  }

  // checkbox inner
  &:after {
    content: '';
    width: $input__checkbox__size--inner;
    height: $input__checkbox__size--inner;
    display: block;
    background: $input__border-color;
    position: absolute;
    top: 50%;
    left: 50%;
    opacity: 0;
    transform-origin: 0% 0%;
    transform: scale(.1) translate(-50%, -50%);
  }

  // hover and checked
  &:hover,
  &:checked {
    border-color: $input__checkbox__color;
    & ~ .form-check-label {
      font-weight: $font-weight--normal;
    }
  }

  // checked
  &:checked {
    &:after {
      background: $input__checkbox__color;
      opacity: 1;
      transform-origin: 0% 0%;
      transform: scale(1) translate(-50%, -50%);
    }
  }

  // disabled
  &:disabled {
    border-color: $input__disabled__bg;
    background: $input__disabled__bg;
    cursor: not-allowed;
    & ~ .form-check-label {
      color: $input__disabled__color;
      font-weight: inherit;
      cursor: not-allowed;
    }
    &:after {
      background: darken($input__disabled__bg, 6%);
    }
  }
}

.form-check-toggle {
  width: $input__checkbox__size*2;

  & ~ .form-check-label {
    padding-left: $input__checkbox__size;
  }

  // checkbox inner
  &:after {
    opacity: 1;
    left: ($input__checkbox__size - $input__checkbox__size--inner)/2 - $input__border-width/2;
    transform: scale(1) translate(0%, -50%);
  }

  // checked
  &:checked {
    &:after {
      left: auto;
      right: ($input__checkbox__size - $input__checkbox__size--inner)*2 - $input__border-width*2;
      transform: scale(1) translate(100%, -50%);
    }
  }
}

.form-check-label {
  margin-bottom: 0; // Override default `<label>` bottom margin
}

.form-check-inline {
  display: inline-flex;
  align-items: center;
  padding-left: 0; // Override base .form-check
  margin-right: $form-check-inline-margin-x;

  // Undo .form-check-input defaults and add some `margin-right`.
  .form-check-input {
    position: static;
    margin-top: 0;
    margin-right: $form-check-inline-input-margin-x;
    margin-left: 0;
  }
}


// Form validation
//
// Provide feedback to users when form field values are valid or invalid. Works
// primarily for client-side validation via scoped `:invalid` and `:valid`
// pseudo-classes but also includes `.is-invalid` and `.is-valid` classes for
// server side validation.

@include form-validation-state("valid", $form-feedback-valid-color);
@include form-validation-state("invalid", $form-feedback-invalid-color);

// Inline forms
//
// Make forms appear inline(-block) by adding the `.form-inline` class. Inline
// forms begin stacked on extra small (mobile) devices and then go inline when
// viewports reach <768px.
//
// Requires wrapping inputs and labels with `.form-group` for proper display of
// default HTML form controls and our custom form controls (e.g., input groups).

.form-inline {
  display: flex;
  flex-flow: row wrap;
  align-items: center; // Prevent shorter elements from growing to same height as others (e.g., small buttons growing to normal sized button height)

  // Because we use flex, the initial sizing of checkboxes is collapsed and
  // doesn't occupy the full-width (which is what we want for xs grid tier),
  // so we force that here.
  .form-check {
    width: 100%;
  }

  // Kick in the inline
  @include media-breakpoint-up(sm) {
    label {
      display: flex;
      align-items: center;
      justify-content: center;
      margin-bottom: 0;
    }

    // Inline-block all the things for "inline"
    .form-group {
      display: flex;
      flex: 0 0 auto;
      flex-flow: row wrap;
      align-items: center;
      margin-bottom: 0;
    }

    // Allow folks to *not* use `.form-group`
    .form-control {
      display: inline-block;
      width: auto; // Prevent labels from stacking above inputs in `.form-group`
      vertical-align: middle;
    }

    // Make static controls behave like regular ones
    .form-control-plaintext {
      display: inline-block;
    }

    .input-group {
      width: auto;
    }

    // Remove default margin on radios/checkboxes that were used for stacking, and
    // then undo the floating of radios and checkboxes to match.
    .form-check {
      display: flex;
      align-items: center;
      justify-content: center;
      width: auto;
      padding-left: 0;
    }
    .form-check-input {
      position: relative;
      margin-top: 0;
      margin-right: $form-check-input-margin-x;
      margin-left: 0;
    }

    .custom-control {
      align-items: center;
      justify-content: center;
    }
    .custom-control-label {
      margin-bottom: 0;
    }
  }
}
